---
layout: post
title:      "Why I decided to study Software Engineering"
date:       2020-04-26 21:40:34 +0000
permalink:  why_i_decided_to_study_software_engineering
---


So why Software Engineering? My interest in programming and software engineering started in elementary school. The computer class curriculum at my school included learning how to use a visual programming language called Scratch. Used to make animations, films, or games, Scratch is designed to be easy to learn. The system uses blocks that you can connect to create logic. After I was introduced to it and taught how to use the program, I was hooked. I think what I loved about it was how much freedom it gave. There were endless possibilities for the stuff you could create. If you wanted to make a pong clone, you could make it. If you wanted to make a story game, you could make it. At the time flash games were huge, and I was greatly inspired to create games similar to the popular games of the time.

Fast forward to the start of high school where I had a new interest: cybersecurity. YouTube was my primary source of education where I learned about everything from cross-site scripting to SQL injection to cookie stealing. I learned how to use Visual Basic to create tools such as keyloggers and password brute forcers (for research only, of course). I also started learning about GET and POST requests and how to manipulate them to send or receive modified data. I think the most important lesson I took out of all that research is to never, ever trust any user input.

In college, I learned about game development using Unreal Engine. Unreal Engine has a very beginner-friendly node-based visual scripting system called Blueprints. Based on underlying C++, the nodes have all the basic functions of most programming languages: loops, various variable types, functions, classes, and more. I made many small projects, each project more advanced than the last. Eventually, however, these projects became so complex that the nodes became tangled and started to look like actual spaghetti. I then realized that while Blueprints are good for simple projects, it doesn't scale well when using it on bigger projects.

After I graduated college with an associate degree I was left with a choice; do I continue learning about art (my major) or do I switch tracks completely? At the time programming was a hobby, but not something I had any formal education in. I decided to switch to learning software engineering for several reasons. One reason is that programming skills are useful in many careers, not just in software engineering. For example, learning Python can help you automate away repetitive tasks that would have otherwise taken hours. Or if you are a designer working on a website, even a little bit of CSS and HTML knowledge can help you flesh out your vision without having to completely rely on a developer to help you every step of the way. Another reason is that I love problem-solving. Taking a problem and creating a solution for it is incredibly satisfying. In a way, it's like an art. You go from nothing, a blank canvas or an empty file, to a complex and well-thought masterpiece. Hours of thinking and careful attention to detail go into both. The final reason, also similar to art, is that I love creating stuff where I can say 'I made that' or 'I helped make that.' There's just something incredibly gratifying about knowing that something you worked on is being used by someone to help them or entertain them.

But before I create that stuff, I have to learn how to use tools to help me make what I want to make and I look forward to learning those tools at Flatiron School!
